"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .sdkconfiguration import SDKConfiguration
from pydataverse import utils
from pydataverse._hooks import HookContext
from pydataverse.models import errors, operations
from typing import List, Optional

class Dataverses:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    
    def post_api_v1_dataverses(self) -> operations.PostAPIV1DataversesResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses', oauth2_scopes=[], security_source=None)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/api/v1/dataverses'
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_(self, identifier: str) -> operations.GetAPIV1DataversesIdentifierResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierRequest, base_url, '/api/v1/dataverses/{identifier}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_(self, identifier: str) -> operations.PostAPIV1DataversesIdentifierResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierRequest, base_url, '/api/v1/dataverses/{identifier}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def delete_api_v1_dataverses_identifier_(self, identifier: str) -> operations.DeleteAPIV1DataversesIdentifierResponse:
        hook_ctx = HookContext(operation_id='delete_/api/v1/dataverses/{identifier}', oauth2_scopes=[], security_source=None)
        request = operations.DeleteAPIV1DataversesIdentifierRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteAPIV1DataversesIdentifierRequest, base_url, '/api/v1/dataverses/{identifier}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('DELETE', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.DeleteAPIV1DataversesIdentifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_actions_publish(self, identifier: str) -> operations.PostAPIV1DataversesIdentifierActionsPublishResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/actions/:publish', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierActionsPublishRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierActionsPublishRequest, base_url, '/api/v1/dataverses/{identifier}/actions/:publish', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierActionsPublishResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_assignments(self, identifier: str) -> operations.GetAPIV1DataversesIdentifierAssignmentsResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/assignments', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierAssignmentsRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierAssignmentsRequest, base_url, '/api/v1/dataverses/{identifier}/assignments', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierAssignmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_assignments(self, identifier: str, key: Optional[str] = None) -> operations.PostAPIV1DataversesIdentifierAssignmentsResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/assignments', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierAssignmentsRequest(
            identifier=identifier,
            key=key,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierAssignmentsRequest, base_url, '/api/v1/dataverses/{identifier}/assignments', request)
        headers = {}
        query_params = utils.get_query_params(operations.PostAPIV1DataversesIdentifierAssignmentsRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierAssignmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def delete_api_v1_dataverses_identifier_assignments_id_(self, id: int, identifier: str) -> operations.DeleteAPIV1DataversesIdentifierAssignmentsIDResponse:
        hook_ctx = HookContext(operation_id='delete_/api/v1/dataverses/{identifier}/assignments/{id}', oauth2_scopes=[], security_source=None)
        request = operations.DeleteAPIV1DataversesIdentifierAssignmentsIDRequest(
            id=id,
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteAPIV1DataversesIdentifierAssignmentsIDRequest, base_url, '/api/v1/dataverses/{identifier}/assignments/{id}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('DELETE', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.DeleteAPIV1DataversesIdentifierAssignmentsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def put_api_v1_dataverses_identifier_attribute_attribute_(self, attribute: str, identifier: str, value: Optional[str] = None) -> operations.PutAPIV1DataversesIdentifierAttributeAttributeResponse:
        hook_ctx = HookContext(operation_id='put_/api/v1/dataverses/{identifier}/attribute/{attribute}', oauth2_scopes=[], security_source=None)
        request = operations.PutAPIV1DataversesIdentifierAttributeAttributeRequest(
            attribute=attribute,
            identifier=identifier,
            value=value,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PutAPIV1DataversesIdentifierAttributeAttributeRequest, base_url, '/api/v1/dataverses/{identifier}/attribute/{attribute}', request)
        headers = {}
        query_params = utils.get_query_params(operations.PutAPIV1DataversesIdentifierAttributeAttributeRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PUT', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PutAPIV1DataversesIdentifierAttributeAttributeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_contents(self, identifier: str) -> operations.GetAPIV1DataversesIdentifierContentsResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/contents', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierContentsRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierContentsRequest, base_url, '/api/v1/dataverses/{identifier}/contents', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierContentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_dataset_schema(self, identifier: str) -> operations.GetAPIV1DataversesIdentifierDatasetSchemaResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/datasetSchema', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierDatasetSchemaRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierDatasetSchemaRequest, base_url, '/api/v1/dataverses/{identifier}/datasetSchema', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierDatasetSchemaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_datasets(self, identifier: str, do_not_validate: Optional[str] = None, request_body: Optional[str] = None) -> operations.PostAPIV1DataversesIdentifierDatasetsResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/datasets', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierDatasetsRequest(
            identifier=identifier,
            do_not_validate=do_not_validate,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierDatasetsRequest, base_url, '/api/v1/dataverses/{identifier}/datasets', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAPIV1DataversesIdentifierDatasetsRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostAPIV1DataversesIdentifierDatasetsRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierDatasetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_datasets_import(self, identifier: str, pid: Optional[str] = None, release: Optional[str] = None) -> operations.PostAPIV1DataversesIdentifierDatasetsImportResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/datasets/:import', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierDatasetsImportRequest(
            identifier=identifier,
            pid=pid,
            release=release,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierDatasetsImportRequest, base_url, '/api/v1/dataverses/{identifier}/datasets/:import', request)
        headers = {}
        query_params = utils.get_query_params(operations.PostAPIV1DataversesIdentifierDatasetsImportRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierDatasetsImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_datasets_importddi(self, identifier: str, pid: Optional[str] = None, release: Optional[str] = None) -> operations.PostAPIV1DataversesIdentifierDatasetsImportddiResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/datasets/:importddi', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierDatasetsImportddiRequest(
            identifier=identifier,
            pid=pid,
            release=release,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierDatasetsImportddiRequest, base_url, '/api/v1/dataverses/{identifier}/datasets/:importddi', request)
        headers = {}
        query_params = utils.get_query_params(operations.PostAPIV1DataversesIdentifierDatasetsImportddiRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierDatasetsImportddiResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_datasets_startmigration(self, identifier: str, request_body: Optional[str] = None) -> operations.PostAPIV1DataversesIdentifierDatasetsStartmigrationResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/datasets/:startmigration', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierDatasetsStartmigrationRequest(
            identifier=identifier,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierDatasetsStartmigrationRequest, base_url, '/api/v1/dataverses/{identifier}/datasets/:startmigration', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAPIV1DataversesIdentifierDatasetsStartmigrationRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierDatasetsStartmigrationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def put_api_v1_dataverses_identifier_default_contributor_role_role_alias_(self, identifier: str, role_alias: str) -> operations.PutAPIV1DataversesIdentifierDefaultContributorRoleRoleAliasResponse:
        hook_ctx = HookContext(operation_id='put_/api/v1/dataverses/{identifier}/defaultContributorRole/{roleAlias}', oauth2_scopes=[], security_source=None)
        request = operations.PutAPIV1DataversesIdentifierDefaultContributorRoleRoleAliasRequest(
            identifier=identifier,
            role_alias=role_alias,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PutAPIV1DataversesIdentifierDefaultContributorRoleRoleAliasRequest, base_url, '/api/v1/dataverses/{identifier}/defaultContributorRole/{roleAlias}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PUT', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PutAPIV1DataversesIdentifierDefaultContributorRoleRoleAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_facets(self, identifier: str) -> operations.GetAPIV1DataversesIdentifierFacetsResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/facets', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierFacetsRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierFacetsRequest, base_url, '/api/v1/dataverses/{identifier}/facets', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierFacetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_facets(self, identifier: str) -> operations.PostAPIV1DataversesIdentifierFacetsResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/facets', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierFacetsRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierFacetsRequest, base_url, '/api/v1/dataverses/{identifier}/facets', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierFacetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_groups(self, identifier: str, key: Optional[str] = None) -> operations.GetAPIV1DataversesIdentifierGroupsResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/groups', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierGroupsRequest(
            identifier=identifier,
            key=key,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierGroupsRequest, base_url, '/api/v1/dataverses/{identifier}/groups', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetAPIV1DataversesIdentifierGroupsRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_groups(self, identifier: str) -> operations.PostAPIV1DataversesIdentifierGroupsResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/groups', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierGroupsRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierGroupsRequest, base_url, '/api/v1/dataverses/{identifier}/groups', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_groups_alias_in_owner_(self, alias_in_owner: str, identifier: str) -> operations.GetAPIV1DataversesIdentifierGroupsAliasInOwnerResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/groups/{aliasInOwner}', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierGroupsAliasInOwnerRequest(
            alias_in_owner=alias_in_owner,
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierGroupsAliasInOwnerRequest, base_url, '/api/v1/dataverses/{identifier}/groups/{aliasInOwner}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierGroupsAliasInOwnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def put_api_v1_dataverses_identifier_groups_alias_in_owner_(self, alias_in_owner: str, identifier: str) -> operations.PutAPIV1DataversesIdentifierGroupsAliasInOwnerResponse:
        hook_ctx = HookContext(operation_id='put_/api/v1/dataverses/{identifier}/groups/{aliasInOwner}', oauth2_scopes=[], security_source=None)
        request = operations.PutAPIV1DataversesIdentifierGroupsAliasInOwnerRequest(
            alias_in_owner=alias_in_owner,
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PutAPIV1DataversesIdentifierGroupsAliasInOwnerRequest, base_url, '/api/v1/dataverses/{identifier}/groups/{aliasInOwner}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PUT', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PutAPIV1DataversesIdentifierGroupsAliasInOwnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def delete_api_v1_dataverses_identifier_groups_alias_in_owner_(self, alias_in_owner: str, identifier: str) -> operations.DeleteAPIV1DataversesIdentifierGroupsAliasInOwnerResponse:
        hook_ctx = HookContext(operation_id='delete_/api/v1/dataverses/{identifier}/groups/{aliasInOwner}', oauth2_scopes=[], security_source=None)
        request = operations.DeleteAPIV1DataversesIdentifierGroupsAliasInOwnerRequest(
            alias_in_owner=alias_in_owner,
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteAPIV1DataversesIdentifierGroupsAliasInOwnerRequest, base_url, '/api/v1/dataverses/{identifier}/groups/{aliasInOwner}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('DELETE', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.DeleteAPIV1DataversesIdentifierGroupsAliasInOwnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_groups_alias_in_owner_role_assignees(self, alias_in_owner: str, identifier: str, request_body: Optional[List[str]] = None) -> operations.PostAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/groups/{aliasInOwner}/roleAssignees', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesRequest(
            alias_in_owner=alias_in_owner,
            identifier=identifier,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesRequest, base_url, '/api/v1/dataverses/{identifier}/groups/{aliasInOwner}/roleAssignees', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def put_api_v1_dataverses_identifier_groups_alias_in_owner_role_assignees_role_assignee_identifier_(self, alias_in_owner: str, identifier: str, role_assignee_identifier: str) -> operations.PutAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesRoleAssigneeIdentifierResponse:
        hook_ctx = HookContext(operation_id='put_/api/v1/dataverses/{identifier}/groups/{aliasInOwner}/roleAssignees/{roleAssigneeIdentifier}', oauth2_scopes=[], security_source=None)
        request = operations.PutAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesRoleAssigneeIdentifierRequest(
            alias_in_owner=alias_in_owner,
            identifier=identifier,
            role_assignee_identifier=role_assignee_identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PutAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesRoleAssigneeIdentifierRequest, base_url, '/api/v1/dataverses/{identifier}/groups/{aliasInOwner}/roleAssignees/{roleAssigneeIdentifier}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PUT', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PutAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesRoleAssigneeIdentifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def delete_api_v1_dataverses_identifier_groups_alias_in_owner_role_assignees_role_assignee_identifier_(self, alias_in_owner: str, identifier: str, role_assignee_identifier: str) -> operations.DeleteAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesRoleAssigneeIdentifierResponse:
        hook_ctx = HookContext(operation_id='delete_/api/v1/dataverses/{identifier}/groups/{aliasInOwner}/roleAssignees/{roleAssigneeIdentifier}', oauth2_scopes=[], security_source=None)
        request = operations.DeleteAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesRoleAssigneeIdentifierRequest(
            alias_in_owner=alias_in_owner,
            identifier=identifier,
            role_assignee_identifier=role_assignee_identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesRoleAssigneeIdentifierRequest, base_url, '/api/v1/dataverses/{identifier}/groups/{aliasInOwner}/roleAssignees/{roleAssigneeIdentifier}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('DELETE', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.DeleteAPIV1DataversesIdentifierGroupsAliasInOwnerRoleAssigneesRoleAssigneeIdentifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_guestbook_responses(self, identifier: str, guestbook_id: Optional[int] = None) -> operations.GetAPIV1DataversesIdentifierGuestbookResponsesResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/guestbookResponses', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierGuestbookResponsesRequest(
            identifier=identifier,
            guestbook_id=guestbook_id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierGuestbookResponsesRequest, base_url, '/api/v1/dataverses/{identifier}/guestbookResponses', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetAPIV1DataversesIdentifierGuestbookResponsesRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierGuestbookResponsesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_links(self, identifier: str) -> operations.GetAPIV1DataversesIdentifierLinksResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/links', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierLinksRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierLinksRequest, base_url, '/api/v1/dataverses/{identifier}/links', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierLinksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_metadatablockfacets(self, identifier: str) -> operations.GetAPIV1DataversesIdentifierMetadatablockfacetsResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/metadatablockfacets', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierMetadatablockfacetsRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierMetadatablockfacetsRequest, base_url, '/api/v1/dataverses/{identifier}/metadatablockfacets', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierMetadatablockfacetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_metadatablockfacets(self, identifier: str, request_body: Optional[List[str]] = None) -> operations.PostAPIV1DataversesIdentifierMetadatablockfacetsResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/metadatablockfacets', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierMetadatablockfacetsRequest(
            identifier=identifier,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierMetadatablockfacetsRequest, base_url, '/api/v1/dataverses/{identifier}/metadatablockfacets', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAPIV1DataversesIdentifierMetadatablockfacetsRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierMetadatablockfacetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_metadatablockfacets_is_root(self, identifier: str, request_body: Optional[str] = None) -> operations.PostAPIV1DataversesIdentifierMetadatablockfacetsIsRootResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/metadatablockfacets/isRoot', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierMetadatablockfacetsIsRootRequest(
            identifier=identifier,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierMetadatablockfacetsIsRootRequest, base_url, '/api/v1/dataverses/{identifier}/metadatablockfacets/isRoot', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAPIV1DataversesIdentifierMetadatablockfacetsIsRootRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierMetadatablockfacetsIsRootResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_metadatablocks(self, identifier: str) -> operations.GetAPIV1DataversesIdentifierMetadatablocksResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/metadatablocks', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierMetadatablocksRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierMetadatablocksRequest, base_url, '/api/v1/dataverses/{identifier}/metadatablocks', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierMetadatablocksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_metadatablocks(self, identifier: str) -> operations.PostAPIV1DataversesIdentifierMetadatablocksResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/metadatablocks', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierMetadatablocksRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierMetadatablocksRequest, base_url, '/api/v1/dataverses/{identifier}/metadatablocks', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierMetadatablocksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_metadatablocks_is_root(self, identifier: str) -> operations.GetAPIV1DataversesIdentifierMetadatablocksIsRootResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/metadatablocks/:isRoot', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierMetadatablocksIsRootRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierMetadatablocksIsRootRequest, base_url, '/api/v1/dataverses/{identifier}/metadatablocks/:isRoot', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierMetadatablocksIsRootResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_metadatablocks_is_root(self, identifier: str, request_body: Optional[str] = None) -> operations.PostAPIV1DataversesIdentifierMetadatablocksIsRootResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/metadatablocks/:isRoot', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierMetadatablocksIsRootRequest(
            identifier=identifier,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierMetadatablocksIsRootRequest, base_url, '/api/v1/dataverses/{identifier}/metadatablocks/:isRoot', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAPIV1DataversesIdentifierMetadatablocksIsRootRequest, "request_body", False, True, 'string')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierMetadatablocksIsRootResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_roles(self, identifier: str) -> operations.GetAPIV1DataversesIdentifierRolesResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/roles', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierRolesRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierRolesRequest, base_url, '/api/v1/dataverses/{identifier}/roles', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_roles(self, identifier: str) -> operations.PostAPIV1DataversesIdentifierRolesResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/roles', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierRolesRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierRolesRequest, base_url, '/api/v1/dataverses/{identifier}/roles', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_storage_quota(self, identifier: str) -> operations.GetAPIV1DataversesIdentifierStorageQuotaResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/storage/quota', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierStorageQuotaRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierStorageQuotaRequest, base_url, '/api/v1/dataverses/{identifier}/storage/quota', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierStorageQuotaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def delete_api_v1_dataverses_identifier_storage_quota(self, identifier: str) -> operations.DeleteAPIV1DataversesIdentifierStorageQuotaResponse:
        hook_ctx = HookContext(operation_id='delete_/api/v1/dataverses/{identifier}/storage/quota', oauth2_scopes=[], security_source=None)
        request = operations.DeleteAPIV1DataversesIdentifierStorageQuotaRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteAPIV1DataversesIdentifierStorageQuotaRequest, base_url, '/api/v1/dataverses/{identifier}/storage/quota', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('DELETE', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.DeleteAPIV1DataversesIdentifierStorageQuotaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_storage_quota_bytes_allocated_(self, bytes_allocated: int, identifier: str) -> operations.PostAPIV1DataversesIdentifierStorageQuotaBytesAllocatedResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/storage/quota/{bytesAllocated}', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierStorageQuotaBytesAllocatedRequest(
            bytes_allocated=bytes_allocated,
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierStorageQuotaBytesAllocatedRequest, base_url, '/api/v1/dataverses/{identifier}/storage/quota/{bytesAllocated}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierStorageQuotaBytesAllocatedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_storage_use(self, identifier: str) -> operations.GetAPIV1DataversesIdentifierStorageUseResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/storage/use', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierStorageUseRequest(
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierStorageUseRequest, base_url, '/api/v1/dataverses/{identifier}/storage/use', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierStorageUseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_dataverses_identifier_storagesize(self, identifier: str, include_cached: Optional[bool] = None) -> operations.GetAPIV1DataversesIdentifierStoragesizeResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/dataverses/{identifier}/storagesize', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1DataversesIdentifierStoragesizeRequest(
            identifier=identifier,
            include_cached=include_cached,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1DataversesIdentifierStoragesizeRequest, base_url, '/api/v1/dataverses/{identifier}/storagesize', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetAPIV1DataversesIdentifierStoragesizeRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1DataversesIdentifierStoragesizeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_identifier_validate_dataset_json(self, identifier: str, request_body: Optional[str] = None) -> operations.PostAPIV1DataversesIdentifierValidateDatasetJSONResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{identifier}/validateDatasetJson', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIdentifierValidateDatasetJSONRequest(
            identifier=identifier,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIdentifierValidateDatasetJSONRequest, base_url, '/api/v1/dataverses/{identifier}/validateDatasetJson', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAPIV1DataversesIdentifierValidateDatasetJSONRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIdentifierValidateDatasetJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_dataverses_id_move_target_dataverse_alias_(self, id: str, target_dataverse_alias: str, force_move: Optional[bool] = None) -> operations.PostAPIV1DataversesIDMoveTargetDataverseAliasResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/dataverses/{id}/move/{targetDataverseAlias}', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1DataversesIDMoveTargetDataverseAliasRequest(
            id=id,
            target_dataverse_alias=target_dataverse_alias,
            force_move=force_move,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1DataversesIDMoveTargetDataverseAliasRequest, base_url, '/api/v1/dataverses/{id}/move/{targetDataverseAlias}', request)
        headers = {}
        query_params = utils.get_query_params(operations.PostAPIV1DataversesIDMoveTargetDataverseAliasRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1DataversesIDMoveTargetDataverseAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def put_api_v1_dataverses_linked_dataverse_alias_link_linking_dataverse_alias_(self, linked_dataverse_alias: str, linking_dataverse_alias: str) -> operations.PutAPIV1DataversesLinkedDataverseAliasLinkLinkingDataverseAliasResponse:
        hook_ctx = HookContext(operation_id='put_/api/v1/dataverses/{linkedDataverseAlias}/link/{linkingDataverseAlias}', oauth2_scopes=[], security_source=None)
        request = operations.PutAPIV1DataversesLinkedDataverseAliasLinkLinkingDataverseAliasRequest(
            linked_dataverse_alias=linked_dataverse_alias,
            linking_dataverse_alias=linking_dataverse_alias,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PutAPIV1DataversesLinkedDataverseAliasLinkLinkingDataverseAliasRequest, base_url, '/api/v1/dataverses/{linkedDataverseAlias}/link/{linkingDataverseAlias}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PUT', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PutAPIV1DataversesLinkedDataverseAliasLinkLinkingDataverseAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def delete_api_v1_dataverses_linking_dataverse_id_delete_link_linked_dataverse_id_(self, linked_dataverse_id: str, linking_dataverse_id: str) -> operations.DeleteAPIV1DataversesLinkingDataverseIDDeleteLinkLinkedDataverseIDResponse:
        hook_ctx = HookContext(operation_id='delete_/api/v1/dataverses/{linkingDataverseId}/deleteLink/{linkedDataverseId}', oauth2_scopes=[], security_source=None)
        request = operations.DeleteAPIV1DataversesLinkingDataverseIDDeleteLinkLinkedDataverseIDRequest(
            linked_dataverse_id=linked_dataverse_id,
            linking_dataverse_id=linking_dataverse_id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteAPIV1DataversesLinkingDataverseIDDeleteLinkLinkedDataverseIDRequest, base_url, '/api/v1/dataverses/{linkingDataverseId}/deleteLink/{linkedDataverseId}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('DELETE', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.DeleteAPIV1DataversesLinkingDataverseIDDeleteLinkLinkedDataverseIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    