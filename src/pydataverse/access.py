"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .sdkconfiguration import SDKConfiguration
from pydataverse import utils
from pydataverse._hooks import HookContext
from pydataverse.models import errors, operations
from typing import Optional

class Access:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    
    def get_api_v1_access_datafile_bundle_file_id_(self, file_id: str, file_metadata_id: Optional[int] = None, gbrecs: Optional[bool] = None) -> operations.GetAPIV1AccessDatafileBundleFileIDResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/datafile/bundle/{fileId}', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatafileBundleFileIDRequest(
            file_id=file_id,
            file_metadata_id=file_metadata_id,
            gbrecs=gbrecs,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatafileBundleFileIDRequest, base_url, '/api/v1/access/datafile/bundle/{fileId}', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetAPIV1AccessDatafileBundleFileIDRequest, request)
        headers['Accept'] = 'application/zip'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatafileBundleFileIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/zip'):
                res.body = http_res.content
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_datafile_file_id_(self, file_id: str, gbrecs: Optional[bool] = None) -> operations.GetAPIV1AccessDatafileFileIDResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/datafile/{fileId}', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatafileFileIDRequest(
            file_id=file_id,
            gbrecs=gbrecs,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatafileFileIDRequest, base_url, '/api/v1/access/datafile/{fileId}', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetAPIV1AccessDatafileFileIDRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatafileFileIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_datafile_file_id_auxiliary(self, file_id: str) -> operations.GetAPIV1AccessDatafileFileIDAuxiliaryResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/datafile/{fileId}/auxiliary', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatafileFileIDAuxiliaryRequest(
            file_id=file_id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatafileFileIDAuxiliaryRequest, base_url, '/api/v1/access/datafile/{fileId}/auxiliary', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatafileFileIDAuxiliaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_datafile_file_id_auxiliary_format_tag_format_version_(self, file_id: str, format_tag: str, format_version: str) -> operations.GetAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/datafile/{fileId}/auxiliary/{formatTag}/{formatVersion}', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionRequest(
            file_id=file_id,
            format_tag=format_tag,
            format_version=format_version,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionRequest, base_url, '/api/v1/access/datafile/{fileId}/auxiliary/{formatTag}/{formatVersion}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.res = http_res.content
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_access_datafile_file_id_auxiliary_format_tag_format_version_(self, file_id: int, format_tag: str, format_version: str, request_body: Optional[operations.PostAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionRequestBody] = None) -> operations.PostAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/access/datafile/{fileId}/auxiliary/{formatTag}/{formatVersion}', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionRequest(
            file_id=file_id,
            format_tag=format_tag,
            format_version=format_version,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionRequest, base_url, '/api/v1/access/datafile/{fileId}/auxiliary/{formatTag}/{formatVersion}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionRequest, "request_body", False, True, 'multipart')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def delete_api_v1_access_datafile_file_id_auxiliary_format_tag_format_version_(self, file_id: int, format_tag: str, format_version: str) -> operations.DeleteAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionResponse:
        hook_ctx = HookContext(operation_id='delete_/api/v1/access/datafile/{fileId}/auxiliary/{formatTag}/{formatVersion}', oauth2_scopes=[], security_source=None)
        request = operations.DeleteAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionRequest(
            file_id=file_id,
            format_tag=format_tag,
            format_version=format_version,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionRequest, base_url, '/api/v1/access/datafile/{fileId}/auxiliary/{formatTag}/{formatVersion}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('DELETE', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.DeleteAPIV1AccessDatafileFileIDAuxiliaryFormatTagFormatVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_datafile_file_id_auxiliary_origin_(self, file_id: str, origin: str) -> operations.GetAPIV1AccessDatafileFileIDAuxiliaryOriginResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/datafile/{fileId}/auxiliary/{origin}', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatafileFileIDAuxiliaryOriginRequest(
            file_id=file_id,
            origin=origin,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatafileFileIDAuxiliaryOriginRequest, base_url, '/api/v1/access/datafile/{fileId}/auxiliary/{origin}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatafileFileIDAuxiliaryOriginResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_datafile_file_id_metadata(self, file_id: str, exclude: Optional[str] = None, file_metadata_id: Optional[int] = None, include: Optional[str] = None) -> operations.GetAPIV1AccessDatafileFileIDMetadataResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/datafile/{fileId}/metadata', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatafileFileIDMetadataRequest(
            file_id=file_id,
            exclude=exclude,
            file_metadata_id=file_metadata_id,
            include=include,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatafileFileIDMetadataRequest, base_url, '/api/v1/access/datafile/{fileId}/metadata', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetAPIV1AccessDatafileFileIDMetadataRequest, request)
        headers['Accept'] = 'text/xml'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatafileFileIDMetadataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.res = http_res.content
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_datafile_file_id_metadata_ddi(self, file_id: str, exclude: Optional[str] = None, file_metadata_id: Optional[int] = None, include: Optional[str] = None) -> operations.GetAPIV1AccessDatafileFileIDMetadataDdiResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/datafile/{fileId}/metadata/ddi', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatafileFileIDMetadataDdiRequest(
            file_id=file_id,
            exclude=exclude,
            file_metadata_id=file_metadata_id,
            include=include,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatafileFileIDMetadataDdiRequest, base_url, '/api/v1/access/datafile/{fileId}/metadata/ddi', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetAPIV1AccessDatafileFileIDMetadataDdiRequest, request)
        headers['Accept'] = 'text/xml'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatafileFileIDMetadataDdiResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.res = http_res.content
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def put_api_v1_access_datafile_id_grant_access_identifier_(self, id: str, identifier: str) -> operations.PutAPIV1AccessDatafileIDGrantAccessIdentifierResponse:
        hook_ctx = HookContext(operation_id='put_/api/v1/access/datafile/{id}/grantAccess/{identifier}', oauth2_scopes=[], security_source=None)
        request = operations.PutAPIV1AccessDatafileIDGrantAccessIdentifierRequest(
            id=id,
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PutAPIV1AccessDatafileIDGrantAccessIdentifierRequest, base_url, '/api/v1/access/datafile/{id}/grantAccess/{identifier}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PUT', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PutAPIV1AccessDatafileIDGrantAccessIdentifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_datafile_id_list_requests(self, id: str) -> operations.GetAPIV1AccessDatafileIDListRequestsResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/datafile/{id}/listRequests', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatafileIDListRequestsRequest(
            id=id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatafileIDListRequestsRequest, base_url, '/api/v1/access/datafile/{id}/listRequests', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatafileIDListRequestsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def put_api_v1_access_datafile_id_reject_access_identifier_(self, id: str, identifier: str) -> operations.PutAPIV1AccessDatafileIDRejectAccessIdentifierResponse:
        hook_ctx = HookContext(operation_id='put_/api/v1/access/datafile/{id}/rejectAccess/{identifier}', oauth2_scopes=[], security_source=None)
        request = operations.PutAPIV1AccessDatafileIDRejectAccessIdentifierRequest(
            id=id,
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PutAPIV1AccessDatafileIDRejectAccessIdentifierRequest, base_url, '/api/v1/access/datafile/{id}/rejectAccess/{identifier}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PUT', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PutAPIV1AccessDatafileIDRejectAccessIdentifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def put_api_v1_access_datafile_id_request_access(self, id: str) -> operations.PutAPIV1AccessDatafileIDRequestAccessResponse:
        hook_ctx = HookContext(operation_id='put_/api/v1/access/datafile/{id}/requestAccess', oauth2_scopes=[], security_source=None)
        request = operations.PutAPIV1AccessDatafileIDRequestAccessRequest(
            id=id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PutAPIV1AccessDatafileIDRequestAccessRequest, base_url, '/api/v1/access/datafile/{id}/requestAccess', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PUT', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PutAPIV1AccessDatafileIDRequestAccessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def delete_api_v1_access_datafile_id_revoke_access_identifier_(self, id: str, identifier: str) -> operations.DeleteAPIV1AccessDatafileIDRevokeAccessIdentifierResponse:
        hook_ctx = HookContext(operation_id='delete_/api/v1/access/datafile/{id}/revokeAccess/{identifier}', oauth2_scopes=[], security_source=None)
        request = operations.DeleteAPIV1AccessDatafileIDRevokeAccessIdentifierRequest(
            id=id,
            identifier=identifier,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteAPIV1AccessDatafileIDRevokeAccessIdentifierRequest, base_url, '/api/v1/access/datafile/{id}/revokeAccess/{identifier}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('DELETE', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.DeleteAPIV1AccessDatafileIDRevokeAccessIdentifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_datafile_id_user_file_access_requested(self, id: str) -> operations.GetAPIV1AccessDatafileIDUserFileAccessRequestedResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/datafile/{id}/userFileAccessRequested', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatafileIDUserFileAccessRequestedRequest(
            id=id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatafileIDUserFileAccessRequestedRequest, base_url, '/api/v1/access/datafile/{id}/userFileAccessRequested', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatafileIDUserFileAccessRequestedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_datafile_id_user_permissions(self, id: str) -> operations.GetAPIV1AccessDatafileIDUserPermissionsResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/datafile/{id}/userPermissions', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatafileIDUserPermissionsRequest(
            id=id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatafileIDUserPermissionsRequest, base_url, '/api/v1/access/datafile/{id}/userPermissions', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatafileIDUserPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_api_v1_access_datafiles(self, gbrecs: Optional[bool] = None, request_body: Optional[str] = None) -> operations.PostAPIV1AccessDatafilesResponse:
        hook_ctx = HookContext(operation_id='post_/api/v1/access/datafiles', oauth2_scopes=[], security_source=None)
        request = operations.PostAPIV1AccessDatafilesRequest(
            gbrecs=gbrecs,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/api/v1/access/datafiles'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAPIV1AccessDatafilesRequest, "request_body", False, True, 'string')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostAPIV1AccessDatafilesRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostAPIV1AccessDatafilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_datafiles_file_ids_(self, file_ids: str, gbrecs: Optional[bool] = None) -> operations.GetAPIV1AccessDatafilesFileIdsResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/datafiles/{fileIds}', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatafilesFileIdsRequest(
            file_ids=file_ids,
            gbrecs=gbrecs,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatafilesFileIdsRequest, base_url, '/api/v1/access/datafiles/{fileIds}', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetAPIV1AccessDatafilesFileIdsRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatafilesFileIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_dataset_id_(self, id: str, gbrecs: Optional[bool] = None) -> operations.GetAPIV1AccessDatasetIDResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/dataset/{id}', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatasetIDRequest(
            id=id,
            gbrecs=gbrecs,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatasetIDRequest, base_url, '/api/v1/access/dataset/{id}', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetAPIV1AccessDatasetIDRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatasetIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_dataset_id_versions_version_id_(self, id: str, version_id: str, gbrecs: Optional[bool] = None, key: Optional[str] = None) -> operations.GetAPIV1AccessDatasetIDVersionsVersionIDResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/dataset/{id}/versions/{versionId}', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDatasetIDVersionsVersionIDRequest(
            id=id,
            version_id=version_id,
            gbrecs=gbrecs,
            key=key,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDatasetIDVersionsVersionIDRequest, base_url, '/api/v1/access/dataset/{id}/versions/{versionId}', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetAPIV1AccessDatasetIDVersionsVersionIDRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDatasetIDVersionsVersionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_ds_card_image_version_id_(self, version_id: int) -> operations.GetAPIV1AccessDsCardImageVersionIDResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/dsCardImage/{versionId}', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDsCardImageVersionIDRequest(
            version_id=version_id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDsCardImageVersionIDRequest, base_url, '/api/v1/access/dsCardImage/{versionId}', request)
        headers = {}
        headers['Accept'] = 'image/png'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDsCardImageVersionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'image/png'):
                res.res = http_res.content
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_dv_card_image_dataverse_id_(self, dataverse_id: int) -> operations.GetAPIV1AccessDvCardImageDataverseIDResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/dvCardImage/{dataverseId}', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessDvCardImageDataverseIDRequest(
            dataverse_id=dataverse_id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessDvCardImageDataverseIDRequest, base_url, '/api/v1/access/dvCardImage/{dataverseId}', request)
        headers = {}
        headers['Accept'] = 'image/png'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessDvCardImageDataverseIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'image/png'):
                res.res = http_res.content
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_api_v1_access_file_card_image_file_id_(self, file_id: int) -> operations.GetAPIV1AccessFileCardImageFileIDResponse:
        hook_ctx = HookContext(operation_id='get_/api/v1/access/fileCardImage/{fileId}', oauth2_scopes=[], security_source=None)
        request = operations.GetAPIV1AccessFileCardImageFileIDRequest(
            file_id=file_id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIV1AccessFileCardImageFileIDRequest, base_url, '/api/v1/access/fileCardImage/{fileId}', request)
        headers = {}
        headers['Accept'] = 'image/png'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetAPIV1AccessFileCardImageFileIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'image/png'):
                res.res = http_res.content
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def put_api_v1_access_id_allow_access_request(self, id: str) -> operations.PutAPIV1AccessIDAllowAccessRequestResponse:
        hook_ctx = HookContext(operation_id='put_/api/v1/access/{id}/allowAccessRequest', oauth2_scopes=[], security_source=None)
        request = operations.PutAPIV1AccessIDAllowAccessRequestRequest(
            id=id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PutAPIV1AccessIDAllowAccessRequestRequest, base_url, '/api/v1/access/{id}/allowAccessRequest', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PUT', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PutAPIV1AccessIDAllowAccessRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    