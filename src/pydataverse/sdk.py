"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .access import Access
from .admin import Admin
from .application import Application
from .batch import Batch
from .builtin_users import BuiltinUsers
from .datasets import Datasets
from .datatags import Datatags
from .dataverses import Dataverses
from .edit import Edit
from .files import Files
from .harvest import Harvest
from .inbox import Inbox
from .info import Info
from .ingest import Ingest
from .licenses import Licenses
from .logout import Logout
from .mail import Mail
from .meta import Meta
from .metadatablocks import Metadatablocks
from .mydata import Mydata
from .notifications import Notifications
from .pids import Pids
from .roles import Roles
from .sdkconfiguration import SDKConfiguration, ServerProtocol
from .search import Search
from .users import Users
from .workflows import Workflows
from pydataverse import utils
from pydataverse._hooks import SDKHooks
from typing import Dict


class PyDataverse:
    access: Access
    admin: Admin
    application: Application
    batch: Batch
    builtin_users: BuiltinUsers
    datasets: Datasets
    datatags: Datatags
    dataverses: Dataverses
    edit: Edit
    files: Files
    harvest: Harvest
    inbox: Inbox
    info: Info
    ingest: Ingest
    licenses: Licenses
    logout: Logout
    mail: Mail
    meta: Meta
    metadatablocks: Metadatablocks
    mydata: Mydata
    notifications: Notifications
    pids: Pids
    roles: Roles
    search: Search
    users: Users
    workflows: Workflows

    sdk_configuration: SDKConfiguration

    def __init__(
        self,
        protocol: ServerProtocol = None,
        base_url: str = None,
        server_idx: int = None,
        server_url: str = None,
        url_params: Dict[str, str] = None,
        client: requests_http.Session = None,
        retry_config: utils.RetryConfig = None,
    ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.

        :param protocol: Allows setting the protocol variable for url substitution
        :type protocol: ServerProtocol
        :param base_url: Allows setting the base_url variable for url substitution
        :type base_url: str
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: utils.RetryConfig
        """
        if client is None:
            client = requests_http.Session()

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)
        server_defaults = [
            {
                "protocol": protocol or "https",
                "base_url": base_url or "demo.dataverse.org",
            },
        ]

        self.sdk_configuration = SDKConfiguration(
            client, server_url, server_idx, server_defaults, retry_config=retry_config
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, self.sdk_configuration.client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration._hooks = hooks

        self._init_sdks()

    def _init_sdks(self):
        self.access = Access(self.sdk_configuration)
        self.admin = Admin(self.sdk_configuration)
        self.application = Application(self.sdk_configuration)
        self.batch = Batch(self.sdk_configuration)
        self.builtin_users = BuiltinUsers(self.sdk_configuration)
        self.datasets = Datasets(self.sdk_configuration)
        self.datatags = Datatags(self.sdk_configuration)
        self.dataverses = Dataverses(self.sdk_configuration)
        self.edit = Edit(self.sdk_configuration)
        self.files = Files(self.sdk_configuration)
        self.harvest = Harvest(self.sdk_configuration)
        self.inbox = Inbox(self.sdk_configuration)
        self.info = Info(self.sdk_configuration)
        self.ingest = Ingest(self.sdk_configuration)
        self.licenses = Licenses(self.sdk_configuration)
        self.logout = Logout(self.sdk_configuration)
        self.mail = Mail(self.sdk_configuration)
        self.meta = Meta(self.sdk_configuration)
        self.metadatablocks = Metadatablocks(self.sdk_configuration)
        self.mydata = Mydata(self.sdk_configuration)
        self.notifications = Notifications(self.sdk_configuration)
        self.pids = Pids(self.sdk_configuration)
        self.roles = Roles(self.sdk_configuration)
        self.search = Search(self.sdk_configuration)
        self.users = Users(self.sdk_configuration)
        self.workflows = Workflows(self.sdk_configuration)
